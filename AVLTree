#include<iostream>
#include<algorithm>
using namespace std;

struct AVLTree{
    int Data;
    int Height;
    AVLTree *left;
    AVLTree *right;
};

int GetHeight(AVLTree *T)
{
    if(T == NULL) 
        return 0;   /* 空树高度为0 */
    return max(GetHeight(T->left), GetHeight(T->right)) + 1;
}

AVLTree *SingleLeftRotation(AVLTree *A)
{
    AVLTree *B = A->left;
    A->left = B->right;
    B->right = A;
    A->Height = max(GetHeight(A->left), GetHeight(A->right)) + 1;
    B->Height = max(GetHeight(B->left), GetHeight(B->right)) + 1;
    
    return B;
}

AVLTree *SingleRightRotation(AVLTree *A)
{
    AVLTree *B = A->right;
    A->right = B->left;
    B->left = A;
    A->Height = max(GetHeight(A->left),GetHeight(A->right)) + 1;
    B->Height = max(GetHeight(B->left), GetHeight(B->right)) + 1;
    
    return B;
}

AVLTree *DoubleLeftRightRotation(AVLTree *A)
{
    A->left = SingleRightRotation(A->left);
    return SingleLeftRotation(A);
}

AVLTree *DoubleRightLeftRotation(AVLTree *A)
{
    A->right = SingleLeftRotation(A->right);
    return SingleRightRotation(A);
}

AVLTree *Insert(AVLTree *T, int X)
{
    if(T == NULL){
        T = new AVLTree;
        T-> Height = 0;
        T->Data = X;
        T->left = T->right = NULL;
    }
    else if(X < T->Data){
        T->left = Insert(T->left, X);
        /*如果需要左旋*/
        if(GetHeight(T->left) - GetHeight(T->right) == 2){
            if(X < T->left->Data)
                T = SingleLeftRotation(T);
            else
                T = DoubleLeftRightRotation(T);
        }
    }else if(X > T->Data){
        T->right = Insert(T->right, X);
        /*如果需要右旋*/
        if(GetHeight(T->right) - GetHeight(T->left) == 2){
            if(X > T->right->Data)
                T = SingleRightRotation(T);
            else
                T = DoubleRightLeftRotation(T);
        }
    }/*else if(X == T->Data) 什么也不做*/
    
    T->Height = max(GetHeight(T->left), GetHeight(T->right)) + 1;
    return T;
}

AVLTree *CreateAVLTree(int A[], int N)
{
    AVLTree *T = NULL;
    for(int i = 0; i < N; i++){
        T = Insert(T, A[i]);  /* 每次插入都要T = ... ， 因为根节点可能会变 */
    }
    
    return T;
}
int main()
{
    int A[7] = {5,6,3,8,7,9,1};
    AVLTree *T = CreateAVLTree(A, 7);
    
    system("pause");
    return 0;
}
