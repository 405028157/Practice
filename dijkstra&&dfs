#include<vector>
#include<iostream>
using namespace std;

const int MAXV = 510; //最大顶点数
const int INF = 1000000000;

int G[MAXV][MAXV]; //邻接矩阵
int d[MAXV]; //记录最短距离
int n, m, st, ed; //n为起点数，m为边数，st为起点，ed为终点
vector<int> pre[MAXV];
bool vis[MAXV] = {false};

void dijkstra(int s) //实参为st
{
  fill(d, d+MAXV, INF);
  d[s] = 0;
  
  for(int i = 0; i < n, i++){
    int u = -1, MIN = INF;
    for(int j = 0; j < n; j++){
      if(vis[j] == false && d[j] < MIN){
        u = j;
        MIN = d[j];
      }
    }
    
    if(u == -1) return;
    vis[u] = true;
    for(int v = 0; v < n; v++){
    /* 算法笔记p383还有vis[v] == false这一条件，不太理解。*/
      if(vis[v] == false && G[u][v] != INF){
        if(d[u] + G[u][v] < d[v]){
          d[v] = d[u] + G[u][v];
          pre[v].clear();
          pre[v].push_back(u);
        }else if(d[u] + G[u][v] = d[v]){
          pre[v].push_back(u);
        }
      }
    }
  }
}

int optvalue; //第二标尺最优值
vector<int> path, tempPath; //最优路径、临时路径
void DFS(int v) //v是当前访问结点
{
  //递归边界
  if(v == st){ //如果到了叶子结点st(路径的起点)
    tempPath.pushback(v);
    int value;
    计算路径tempPath上的value值;
    if(value优于optvalue){
      optvalue = value;
      path = tempPath; //vector<int>类型的变量，重载了=运算符
    }
    tempPath.pop_back();
    return;
  }
  
  tempPath.push_back(v);
  for(int i = 0; i < pre[v].size(); i++){
    DFS(pre[v][i]);
  }
  tempPath.pop_back();
}

