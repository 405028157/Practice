#include<iostream>
#include<vector>
#include<queue>
using namespace std;

cost int MAXV = 510;
vector<int> G[MAXV]; //邻接表
int n, m, inDegree[MAXV]; //inDegree是入度

bool topologicalSort()
{
  int num = 0; //记录加入拓扑序列的定点数
  queue<int> q;
  for(int i = 0; i < n; i++){
    if(inDegree[i] == 0){
      q[i].push(i);
    }
  }
  
  while(!q.empty()){
    int u = q.front();
    printf("%d", u); //此处可输出顶点，作为拓扑序列中的顶点
    q.pop();
    for(int i = 0; i < G[u].size(); i++){
      int v = G[u][i]; //u的后继结点v
      inDegree[v]--;
      if(inDegree[v] == 0){
        q.push(v);
      }
    }
    
    G[u].clear();  //清楚顶点u的所有出边，无必要也可以不写
    num++; //加入拓扑排序的顶点加一
  }
  
  if(num == n) return true;
  else return false; // 加入拓扑排序的顶点数小于n，拓扑排序失败。 可以拿3个顶点的环为例， num = 0;
}
